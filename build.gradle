import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.5.31"
    id "edu.wpi.first.GradleRIO" version "2023.1.1-beta-7"
    id "com.github.gmazzo.buildconfig" version "3.0.0"
}

def ROBOT_MAIN_CLASS = "org.team2471.frc2022.Main"

buildConfig {
    buildConfigField("long", "BUILD_TIME", "${System.currentTimeMillis()}L")
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = 2471
            debug = false

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    //targets << "roborio"
                }

                // // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set this to true to enable desktop support.
//def includeDesktopSupport = false

repositories {
    mavenCentral()
    maven { setUrl("https://frcmaven.wpi.edu/artifactory/release/")}
    maven { setUrl("https://plugins.gradle.org/m2/")}
    maven { setUrl("https://maven.ctr-electronics.com/release/") }
    maven { setUrl("https://www.revrobotics.com/content/sw/max/sdk/maven/")}
}
// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation project("meanlib")

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    //testImplementation 'junit:junit:4.12'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    //simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)

    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31"
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib:1.5.31'

    // intentionally not using multhreaded coroutines due to potential memory leaks under heavy load
    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    compileOnly 'com.github.gmazzo.buildconfig:com.github.gmazzo.buildconfig.gradle.plugin:3.0.0'

}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}}
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)

wrapper {
    gradleVersion = '7.3.3'
    distributionType = Wrapper.DistributionType.BIN
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

